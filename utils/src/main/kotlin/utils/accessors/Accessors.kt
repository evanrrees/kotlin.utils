package utils.accessors

fun <T> Collection<T>.second(): T       = elementAt(1)
fun <T> Array<T>     .second(): T       = elementAt(1)
fun <T> Sequence<T>  .second(): T       = elementAt(1)
fun ByteArray        .second(): Byte    = elementAt(1)
fun CharArray        .second(): Char    = elementAt(1)
fun ShortArray       .second(): Short   = elementAt(1)
fun IntArray         .second(): Int     = elementAt(1)
fun LongArray        .second(): Long    = elementAt(1)
fun FloatArray       .second(): Float   = elementAt(1)
fun DoubleArray      .second(): Double  = elementAt(1)
fun BooleanArray     .second(): Boolean = elementAt(1)

fun <T> Collection<T>.second(predicate: (T) -> Boolean):       T       = filter(predicate).second()
fun <T> Array<T>     .second(predicate: (T) -> Boolean):       T       = filter(predicate).second()
fun <T> Sequence<T>  .second(predicate: (T) -> Boolean):       T       = filter(predicate).second()
fun ByteArray        .second(predicate: (Byte) -> Boolean):    Byte    = filter(predicate).second()
fun CharArray        .second(predicate: (Char) -> Boolean):    Char    = filter(predicate).second()
fun ShortArray       .second(predicate: (Short) -> Boolean):   Short   = filter(predicate).second()
fun IntArray         .second(predicate: (Int) -> Boolean):     Int     = filter(predicate).second()
fun LongArray        .second(predicate: (Long) -> Boolean):    Long    = filter(predicate).second()
fun FloatArray       .second(predicate: (Float) -> Boolean):   Float   = filter(predicate).second()
fun DoubleArray      .second(predicate: (Double) -> Boolean):  Double  = filter(predicate).second()
fun BooleanArray     .second(predicate: (Boolean) -> Boolean): Boolean = filter(predicate).second()

fun <T> Collection<T>.third(): T       = elementAt(2)
fun <T> Array<T>     .third(): T       = elementAt(2)
fun <T> Sequence<T>  .third(): T       = elementAt(2)
fun ByteArray        .third(): Byte    = elementAt(2)
fun CharArray        .third(): Char    = elementAt(2)
fun ShortArray       .third(): Short   = elementAt(2)
fun IntArray         .third(): Int     = elementAt(2)
fun LongArray        .third(): Long    = elementAt(2)
fun FloatArray       .third(): Float   = elementAt(2)
fun DoubleArray      .third(): Double  = elementAt(2)
fun BooleanArray     .third(): Boolean = elementAt(2)

fun <T> Collection<T>.third(predicate: (T) -> Boolean):       T       = filter(predicate).third()
fun <T> Array<T>     .third(predicate: (T) -> Boolean):       T       = filter(predicate).third()
fun <T> Sequence<T>  .third(predicate: (T) -> Boolean):       T       = filter(predicate).third()
fun ByteArray        .third(predicate: (Byte) -> Boolean):    Byte    = filter(predicate).third()
fun CharArray        .third(predicate: (Char) -> Boolean):    Char    = filter(predicate).third()
fun ShortArray       .third(predicate: (Short) -> Boolean):   Short   = filter(predicate).third()
fun IntArray         .third(predicate: (Int) -> Boolean):     Int     = filter(predicate).third()
fun LongArray        .third(predicate: (Long) -> Boolean):    Long    = filter(predicate).third()
fun FloatArray       .third(predicate: (Float) -> Boolean):   Float   = filter(predicate).third()
fun DoubleArray      .third(predicate: (Double) -> Boolean):  Double  = filter(predicate).third()
fun BooleanArray     .third(predicate: (Boolean) -> Boolean): Boolean = filter(predicate).third()

